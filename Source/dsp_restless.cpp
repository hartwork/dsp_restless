//////////////////////////////////////////////////////////////////////////////// 
/// Restless Winamp Plugin
/// 
/// Copyright © 2005  Sebastian Pipping <webmaster@hartwork.org>
/// 
/// -->  http://www.hartwork.org
/// 
/// This source code is released as Public Domain.
////////////////////////////////////////////////////////////////////////////////


#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include "Dsp.h"



#ifdef __cplusplus
# define DLLEXPORT extern "C" __declspec( dllexport )
#else
# define DLLEXPORT __declspec( dllexport )
#endif



#define WM_WA_IPC WM_USER
#define IPC_STARTPLAY 102



DWORD dwLast = 0;
UINT_PTR hTimer = 0;



void config_restless( struct winampDSPModule * this_mod );
int init_restless( struct winampDSPModule * this_mod );
int apply_restless( struct winampDSPModule * this_mod, short int * samples, int numsamples, int bps, int nch, int srate );
void quit_restless( struct winampDSPModule * this_mod );

winampDSPModule * getModule( int which );



////////////////////////////////////////////////////////////////////////////////
///
////////////////////////////////////////////////////////////////////////////////
winampDSPHeader header =
{
	DSP_HDRVER,
	"Restless Winamp Plugin // 2005-10-05",
	getModule
};



////////////////////////////////////////////////////////////////////////////////
///
////////////////////////////////////////////////////////////////////////////////
winampDSPModule mod_restless =
{
	"Restless Winamp Plugin",
	NULL,             // hwndParent
	NULL,			  // hDllInstance
	config_restless,
	init_restless,
	apply_restless,
	quit_restless
};



////////////////////////////////////////////////////////////////////////////////
///
////////////////////////////////////////////////////////////////////////////////
void config_restless( struct winampDSPModule * this_mod )
{
	MessageBox(
		this_mod->hwndParent,
		"Restless Winamp Plugin\n"
		"\n"
		"Copyright © 2005 Sebastian Pipping   \n"
		"<webmaster@hartwork.org>\n"
		"\n"
		"-->  http://www.hartwork.org",
		"About",
		MB_ICONINFORMATION
	);
}



//////////////////////////////////////////////////////////////////////////////// 
/// 
//////////////////////////////////////////////////////////////////////////////// 
VOID CALLBACK TimerProc( HWND hwnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime )
{
	if( GetTickCount() - dwLast > 5000 )
	{
		SendMessage( mod_restless.hwndParent, WM_WA_IPC, 0, IPC_STARTPLAY );
	}
}



////////////////////////////////////////////////////////////////////////////////
///
////////////////////////////////////////////////////////////////////////////////
int init_restless( struct winampDSPModule * this_mod )
{
	dwLast = GetTickCount();
	hTimer = SetTimer( NULL, 0, 2000, TimerProc );

	return 0;	// Fine
}



////////////////////////////////////////////////////////////////////////////////
///
////////////////////////////////////////////////////////////////////////////////
int apply_restless( struct winampDSPModule * this_mod, short int * samples, int numsamples, int bps, int nch, int srate )
{
	dwLast = GetTickCount();
	return numsamples;
}



////////////////////////////////////////////////////////////////////////////////
///
////////////////////////////////////////////////////////////////////////////////
void quit_restless( struct winampDSPModule * this_mod )
{
	KillTimer( NULL, hTimer );
}



////////////////////////////////////////////////////////////////////////////////
///
////////////////////////////////////////////////////////////////////////////////
winampDSPModule * getModule( int which )
{
	return ( which ? NULL : &mod_restless );
}



////////////////////////////////////////////////////////////////////////////////
///
////////////////////////////////////////////////////////////////////////////////
DLLEXPORT winampDSPHeader * winampDSPGetHeader2()
{
	return &header;
}
